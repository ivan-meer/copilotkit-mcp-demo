#!/usr/bin/env node

/**
 * Port Manager Script
 * 
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—ã.
 * 
 * @author Claude Code
 * @version 1.0.0
 */

const net = require('net');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// –¶–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  gray: '\x1b[90m',
};

const icons = {
  port: 'üåê',
  success: '‚úÖ',
  warning: '‚ö†Ô∏è',
  error: '‚ùå',
  info: 'üí°',
  kill: 'üíÄ',
  search: 'üîç',
  free: 'üÜì',
  busy: 'üîí',
};

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç–æ–≤
 */
class PortManager {
  constructor() {
    this.defaultPorts = [3000, 3001, 3002, 8080, 8081, 8082];
    this.reservedPorts = new Set();
  }
  
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  log(level, message, data = null) {
    const timestamp = new Date().toTimeString().split(' ')[0];
    const levelColors = {
      info: colors.blue,
      success: colors.green,
      warning: colors.yellow,
      error: colors.red,
    };
    
    const levelIcons = {
      info: icons.info,
      success: icons.success,
      warning: icons.warning,
      error: icons.error,
    };
    
    console.log(`${colors.gray}[${timestamp}]${colors.reset} ${levelIcons[level]} ${levelColors[level]}${message}${colors.reset}`);
    
    if (data) {
      console.log(`${colors.gray}   ${JSON.stringify(data, null, 2)}${colors.reset}`);
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
   */
  async isPortAvailable(port) {
    return new Promise((resolve) => {
      const server = net.createServer();
      
      server.listen(port, '127.0.0.1', () => {
        server.once('close', () => resolve(true));
        server.close();
      });
      
      server.on('error', () => resolve(false));
    });
  }
  
  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
   */
  async findProcessOnPort(port) {
    try {
      const isWindows = process.platform === 'win32';
      
      if (isWindows) {
        // Windows: –∏—Å–ø–æ–ª—å–∑—É–µ–º netstat
        const { stdout } = await execAsync(`netstat -ano | findstr :${port}`);
        const lines = stdout.trim().split('\n');
        
        for (const line of lines) {
          const parts = line.trim().split(/\s+/);
          const localAddress = parts[1];
          const pid = parts[4];
          
          if (localAddress && localAddress.includes(`:${port}`) && pid && !isNaN(pid)) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try {
              const { stdout: processInfo } = await execAsync(`tasklist /PID ${pid} /FO CSV`);
              const processLines = processInfo.trim().split('\n');
              if (processLines.length > 1) {
                const processData = processLines[1].split(',');
                const processName = processData[0].replace(/"/g, '');
                return {
                  pid: parseInt(pid),
                  name: processName,
                  command: processName,
                };
              }
            } catch (e) {
              return {
                pid: parseInt(pid),
                name: 'Unknown',
                command: 'Unknown',
              };
            }
          }
        }
      } else {
        // Unix-like: –∏—Å–ø–æ–ª—å–∑—É–µ–º lsof
        try {
          const { stdout } = await execAsync(`lsof -ti:${port}`);
          const pids = stdout.trim().split('\n').filter(pid => pid && !isNaN(pid));
          
          if (pids.length > 0) {
            const pid = parseInt(pids[0]);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try {
              const { stdout: processInfo } = await execAsync(`ps -p ${pid} -o comm=,args=`);
              const [command, ...args] = processInfo.trim().split(/\s+/);
              
              return {
                pid,
                name: command,
                command: processInfo.trim(),
              };
            } catch (e) {
              return {
                pid,
                name: 'Unknown',
                command: 'Unknown',
              };
            }
          }
        } catch (e) {
          // –ï—Å–ª–∏ lsof –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º netstat
          try {
            const { stdout } = await execAsync(`netstat -tlnp 2>/dev/null | grep :${port}`);
            const lines = stdout.trim().split('\n');
            
            for (const line of lines) {
              const match = line.match(/(\d+)\//);
              if (match) {
                const pid = parseInt(match[1]);
                return {
                  pid,
                  name: 'Unknown',
                  command: 'Unknown',
                };
              }
            }
          } catch (e2) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
          }
        }
      }
      
      return null;
    } catch (error) {
      this.log('warning', `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${port}: ${error.message}`);
      return null;
    }
  }
  
  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async killProcess(pid, force = false) {
    try {
      const isWindows = process.platform === 'win32';
      const command = isWindows 
        ? `taskkill /PID ${pid} ${force ? '/F' : ''}`
        : `kill ${force ? '-9' : '-15'} ${pid}`;
      
      await execAsync(command);
      return true;
    } catch (error) {
      this.log('error', `–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid}: ${error.message}`);
      return false;
    }
  }
  
  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
   */
  async freePort(port, force = false) {
    this.log('info', `${icons.search} –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç ${port}...`);
    
    const isAvailable = await this.isPortAvailable(port);
    if (isAvailable) {
      this.log('success', `${icons.free} –ü–æ—Ä—Ç ${port} —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω`);
      return true;
    }
    
    this.log('warning', `${icons.busy} –ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç, –∏—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å...`);
    
    const process = await this.findProcessOnPort(port);
    if (!process) {
      this.log('error', `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      return false;
    }
    
    this.log('info', `${icons.kill} –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å:`, {
      pid: process.pid,
      name: process.name,
      command: process.command,
    });
    
    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ force
    if (!force) {
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
      });
      
      const answer = await new Promise((resolve) => {
        rl.question(`–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${process.name} (PID: ${process.pid})? [y/N]: `, resolve);
      });
      
      rl.close();
      
      if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
        this.log('info', '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return false;
      }
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    this.log('info', `–û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É ${process.pid}...`);
    let killed = await this.killProcess(process.pid, false);
    
    if (killed) {
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
      await new Promise(resolve => setTimeout(resolve, 2000));
      const stillAvailable = await this.isPortAvailable(port);
      
      if (stillAvailable) {
        this.log('success', `${icons.success} –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
        return true;
      }
    }
    
    // –ï—Å–ª–∏ –º—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    this.log('warning', '–ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...');
    killed = await this.killProcess(process.pid, true);
    
    if (killed) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      const finallyAvailable = await this.isPortAvailable(port);
      
      if (finallyAvailable) {
        this.log('success', `${icons.success} –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
        return true;
      } else {
        this.log('error', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç ${port}`);
        return false;
      }
    } else {
      this.log('error', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${process.pid}`);
      return false;
    }
  }
  
  /**
   * –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
   */
  async findFreePort(startPort = 3000, endPort = 3100) {
    this.log('info', `${icons.search} –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${startPort}-${endPort}...`);
    
    for (let port = startPort; port <= endPort; port++) {
      const isAvailable = await this.isPortAvailable(port);
      if (isAvailable && !this.reservedPorts.has(port)) {
        this.log('success', `${icons.free} –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: ${port}`);
        return port;
      }
    }
    
    this.log('error', `–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${startPort}-${endPort}`);
    return null;
  }
  
  /**
   * –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞
   */
  reservePort(port) {
    this.reservedPorts.add(port);
    this.log('info', `${icons.port} –ü–æ—Ä—Ç ${port} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω`);
  }
  
  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
   */
  unreservePort(port) {
    this.reservedPorts.delete(port);
    this.log('info', `${icons.free} –†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –ø–æ—Ä—Ç–∞ ${port} —Å–Ω—è—Ç–∞`);
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ä—Ç–æ–≤
   */
  async getPortsStatus(ports = this.defaultPorts) {
    this.log('info', `${icons.search} –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–æ–≤...`);
    
    const results = [];
    
    for (const port of ports) {
      const isAvailable = await this.isPortAvailable(port);
      const process = isAvailable ? null : await this.findProcessOnPort(port);
      const isReserved = this.reservedPorts.has(port);
      
      results.push({
        port,
        available: isAvailable,
        reserved: isReserved,
        process,
      });
    }
    
    return results;
  }
  
  /**
   * –ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ä—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
   */
  printPortsStatus(portsStatus) {
    console.log(`\n${colors.cyan}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${colors.reset}`);
    console.log(`${colors.cyan}‚ïë${colors.reset}                              PORTS STATUS                               ${colors.cyan}‚ïë${colors.reset}`);
    console.log(`${colors.cyan}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${colors.reset}`);
    console.log(`${colors.cyan}‚ïë${colors.reset} Port  ‚îÇ Status     ‚îÇ Reserved ‚îÇ Process                                ${colors.cyan}‚ïë${colors.reset}`);
    console.log(`${colors.cyan}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${colors.reset}`);
    
    for (const status of portsStatus) {
      const portStr = status.port.toString().padEnd(5);
      const statusStr = status.available ? 
        `${colors.green}${icons.free} Free${colors.reset}`.padEnd(20) : 
        `${colors.red}${icons.busy} Busy${colors.reset}`.padEnd(20);
      const reservedStr = status.reserved ? 
        `${colors.yellow}Yes${colors.reset}`.padEnd(16) : 
        `${colors.gray}No${colors.reset}`.padEnd(15);
      
      let processStr = '';
      if (status.process) {
        processStr = `${status.process.name} (${status.process.pid})`.substring(0, 35);
      } else {
        processStr = `${colors.gray}-${colors.reset}`;
      }
      
      console.log(`${colors.cyan}‚ïë${colors.reset} ${portStr} ‚îÇ ${statusStr} ‚îÇ ${reservedStr} ‚îÇ ${processStr.padEnd(35)} ${colors.cyan}‚ïë${colors.reset}`);
    }
    
    console.log(`${colors.cyan}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}\n`);
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
   */
  printHelp() {
    console.log(`
${colors.bright}${colors.cyan}Port Manager - –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏${colors.reset}

${colors.bright}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${colors.reset}
  node port-manager.js <command> [options]

${colors.bright}–ö–æ–º–∞–Ω–¥—ã:${colors.reset}
  status [ports...]     –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3000,3001,3002)
  check <port>          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç
  free <port> [--force] –û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
  find [start] [end]    –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  kill <pid>            –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID
  reserve <port>        –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç
  unreserve <port>      –°–Ω—è—Ç—å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é –ø–æ—Ä—Ç–∞
  help                  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

${colors.bright}–ü—Ä–∏–º–µ—Ä—ã:${colors.reset}
  node port-manager.js status
  node port-manager.js status 3000 3001 8080
  node port-manager.js check 3000
  node port-manager.js free 3000
  node port-manager.js free 3000 --force
  node port-manager.js find 3000 3100
  node port-manager.js kill 12345
  node port-manager.js reserve 3000

${colors.bright}–§–ª–∞–≥–∏:${colors.reset}
  --force               –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  --help                –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
`);
  }
  
  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥
   */
  async run() {
    const args = process.argv.slice(2);
    const command = args[0];
    const flags = args.filter(arg => arg.startsWith('--'));
    const params = args.filter(arg => !arg.startsWith('--')).slice(1);
    
    if (!command || command === 'help' || flags.includes('--help')) {
      this.printHelp();
      return;
    }
    
    const force = flags.includes('--force');
    
    try {
      switch (command) {
        case 'status': {
          const ports = params.length > 0 ? params.map(p => parseInt(p)) : this.defaultPorts;
          const status = await this.getPortsStatus(ports);
          this.printPortsStatus(status);
          break;
        }
        
        case 'check': {
          if (params.length === 0) {
            this.log('error', '–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
            return;
          }
          
          const port = parseInt(params[0]);
          const isAvailable = await this.isPortAvailable(port);
          
          if (isAvailable) {
            this.log('success', `${icons.free} –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
          } else {
            const process = await this.findProcessOnPort(port);
            this.log('warning', `${icons.busy} –ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç`, process);
          }
          break;
        }
        
        case 'free': {
          if (params.length === 0) {
            this.log('error', '–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è');
            return;
          }
          
          const port = parseInt(params[0]);
          await this.freePort(port, force);
          break;
        }
        
        case 'find': {
          const startPort = params.length > 0 ? parseInt(params[0]) : 3000;
          const endPort = params.length > 1 ? parseInt(params[1]) : startPort + 100;
          
          const freePort = await this.findFreePort(startPort, endPort);
          if (freePort) {
            console.log(freePort); // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
          } else {
            process.exit(1);
          }
          break;
        }
        
        case 'kill': {
          if (params.length === 0) {
            this.log('error', '–£–∫–∞–∂–∏—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞');
            return;
          }
          
          const pid = parseInt(params[0]);
          const killed = await this.killProcess(pid, force);
          
          if (killed) {
            this.log('success', `${icons.success} –ü—Ä–æ—Ü–µ—Å—Å ${pid} –∑–∞–≤–µ—Ä—à–µ–Ω`);
          } else {
            this.log('error', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}`);
            process.exit(1);
          }
          break;
        }
        
        case 'reserve': {
          if (params.length === 0) {
            this.log('error', '–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
          }
          
          const port = parseInt(params[0]);
          this.reservePort(port);
          break;
        }
        
        case 'unreserve': {
          if (params.length === 0) {
            this.log('error', '–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
            return;
          }
          
          const port = parseInt(params[0]);
          this.unreservePort(port);
          break;
        }
        
        default:
          this.log('error', `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
          this.printHelp();
          process.exit(1);
      }
    } catch (error) {
      this.log('error', `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const manager = new PortManager();
  manager.run().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { PortManager };