#!/usr/bin/env node

/**
 * –£–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ—Ä—Ç–æ–≤ –∏ –∫—Ä–∞—Å–∏–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤
 * 2. –£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–∞—Ö
 * 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * 4. –ó–∞–ø—É—Å–∫–∞–µ—Ç Next.js –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * @author Claude Code
 * @version 1.0.0
 */

const { spawn, exec } = require('child_process');
const net = require('net');
const path = require('path');
const fs = require('fs');

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  gray: '\x1b[90m',
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
const icons = {
  info: 'üí°',
  success: '‚úÖ',
  warning: '‚ö†Ô∏è',
  error: '‚ùå',
  loading: '‚è≥',
  rocket: 'üöÄ',
  gear: '‚öôÔ∏è',
  network: 'üåê',
  process: '‚ö°',
  clean: 'üßπ',
  search: 'üîç',
  kill: 'üíÄ',
  heart: 'üíñ',
};

/**
 * –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
class DevLogger {
  constructor() {
    this.startTime = Date.now();
    this.sessionId = this.generateSessionId();
  }
  
  generateSessionId() {
    return `dev_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
  }
  
  getTimestamp() {
    const now = new Date();
    return now.toTimeString().split(' ')[0] + '.' + now.getMilliseconds().toString().padStart(3, '0');
  }
  
  formatMessage(level, icon, message, data = null) {
    const timestamp = `${colors.gray}[${this.getTimestamp()}]${colors.reset}`;
    const levelColor = level === 'error' ? colors.red :
                      level === 'warn' ? colors.yellow :
                      level === 'success' ? colors.green :
                      level === 'info' ? colors.blue : colors.cyan;
    
    let formatted = `${timestamp} ${icon} ${levelColor}${message}${colors.reset}`;
    
    if (data) {
      formatted += `\n${colors.dim}   ${JSON.stringify(data, null, 2)}${colors.reset}`;
    }
    
    return formatted;
  }
  
  info(message, data) {
    console.log(this.formatMessage('info', icons.info, message, data));
  }
  
  success(message, data) {
    console.log(this.formatMessage('success', icons.success, message, data));
  }
  
  warn(message, data) {
    console.log(this.formatMessage('warn', icons.warning, message, data));
  }
  
  error(message, data) {
    console.log(this.formatMessage('error', icons.error, message, data));
  }
  
  loading(message) {
    console.log(this.formatMessage('loading', icons.loading, message));
  }
  
  printBanner() {
    const banner = `
${colors.cyan}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${colors.reset}
${colors.cyan}‚ïë${colors.reset}                                                            ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}  ${colors.bright}${colors.blue}${icons.rocket} Universal AI Chat Hub - Dev Mode${colors.reset}              ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}     ${colors.gray}Smart Development Script${colors.reset}                           ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}     ${colors.gray}Session: ${this.sessionId}${colors.reset}                  ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}                                                            ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}  ${colors.green}Features:${colors.reset}                                              ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}  ${colors.blue}${icons.network} Port Management${colors.reset}                                    ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}  ${colors.blue}${icons.process} Process Monitoring${colors.reset}                                ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}  ${colors.blue}${icons.heart} Health Checking${colors.reset}                                    ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}  ${colors.blue}${icons.gear} Auto-restart${colors.reset}                                       ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïë${colors.reset}                                                            ${colors.cyan}‚ïë${colors.reset}
${colors.cyan}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}
`;
    console.log(banner);
  }
  
  printSeparator(title) {
    const line = '‚îÄ'.repeat(60);
    console.log(`\n${colors.cyan}${line}${colors.reset}`);
    if (title) {
      console.log(`${colors.bright}${colors.cyan}${title}${colors.reset}`);
      console.log(`${colors.cyan}${line}${colors.reset}`);
    }
  }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç–æ–≤
 */
class PortManager {
  constructor(logger) {
    this.logger = logger;
    this.defaultPorts = [3000, 3001, 3002];
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
   */
  async isPortAvailable(port) {
    return new Promise((resolve) => {
      const server = net.createServer();
      
      server.listen(port, () => {
        server.once('close', () => resolve(true));
        server.close();
      });
      
      server.on('error', () => resolve(false));
    });
  }
  
  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É
   */
  async findProcessOnPort(port) {
    return new Promise((resolve) => {
      // –î–ª—è —Ä–∞–∑–Ω—ã—Ö –û–° –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      const isWindows = process.platform === 'win32';
      const command = isWindows 
        ? `netstat -ano | findstr :${port}`
        : `lsof -ti:${port}`;
      
      exec(command, (error, stdout) => {
        if (error) {
          resolve(null);
          return;
        }
        
        if (isWindows) {
          // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ netstat –¥–ª—è Windows
          const lines = stdout.trim().split('\n');
          const pids = lines
            .map(line => line.trim().split(/\s+/).pop())
            .filter(pid => pid && !isNaN(pid));
          resolve(pids[0] || null);
        } else {
          // Unix-like —Å–∏—Å—Ç–µ–º—ã
          const pid = stdout.trim().split('\n')[0];
          resolve(pid || null);
        }
      });
    });
  }
  
  /**
   * –£–±–∏–π—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
   */
  async killProcess(pid) {
    return new Promise((resolve) => {
      const isWindows = process.platform === 'win32';
      const command = isWindows ? `taskkill /PID ${pid} /F` : `kill -9 ${pid}`;
      
      exec(command, (error) => {
        resolve(!error);
      });
    });
  }
  
  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
   */
  async freePort(port) {
    this.logger.loading(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç ${port}...`);
    
    const isAvailable = await this.isPortAvailable(port);
    if (isAvailable) {
      this.logger.success(`–ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
      return true;
    }
    
    this.logger.warn(`–ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç, –∏—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å...`);
    
    const pid = await this.findProcessOnPort(port);
    if (!pid) {
      this.logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      return false;
    }
    
    this.logger.info(`${icons.kill} –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å PID ${pid} –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    
    const killed = await this.killProcess(pid);
    if (killed) {
      this.logger.success(`–ü—Ä–æ—Ü–µ—Å—Å ${pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω`);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
      await new Promise(resolve => setTimeout(resolve, 1000));
      const nowAvailable = await this.isPortAvailable(port);
      
      if (nowAvailable) {
        this.logger.success(`–ü–æ—Ä—Ç ${port} —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–µ–Ω`);
        return true;
      } else {
        this.logger.error(`–ü–æ—Ä—Ç ${port} –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç`);
        return false;
      }
    } else {
      this.logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}`);
      return false;
    }
  }
  
  /**
   * –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
   */
  async findAvailablePort() {
    for (const port of this.defaultPorts) {
      const isAvailable = await this.isPortAvailable(port);
      if (isAvailable) {
        return port;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–π
    const primaryPort = this.defaultPorts[0];
    const freed = await this.freePort(primaryPort);
    
    return freed ? primaryPort : null;
  }
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class HealthMonitor {
  constructor(logger, port) {
    this.logger = logger;
    this.port = port;
    this.checkInterval = null;
    this.isHealthy = false;
    this.consecutiveFailures = 0;
    this.maxFailures = 3;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async checkHealth() {
    try {
      const response = await fetch(`http://localhost:${this.port}/api/health`);
      if (response.ok) {
        if (!this.isHealthy) {
          this.logger.success(`${icons.heart} –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
          this.isHealthy = true;
        }
        this.consecutiveFailures = 0;
        return true;
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      this.consecutiveFailures++;
      
      if (this.isHealthy) {
        this.logger.warn(`${icons.warning} –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
        this.isHealthy = false;
      }
      
      if (this.consecutiveFailures >= this.maxFailures) {
        this.logger.error(`${icons.error} –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —É–∂–µ ${this.consecutiveFailures} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥`);
      }
      
      return false;
    }
  }
  
  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  start() {
    this.logger.info(`${icons.heart} –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    setTimeout(() => {
      this.checkHealth();
      
      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      this.checkInterval = setInterval(() => {
        this.checkHealth();
      }, 30000);
    }, 5000);
  }
  
  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  stop() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }
  }
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
class DevRunner {
  constructor() {
    this.logger = new DevLogger();
    this.portManager = new PortManager(this.logger);
    this.healthMonitor = null;
    this.nextProcess = null;
    this.isShuttingDown = false;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è package.json
   */
  checkPackageJson() {
    const packagePath = path.join(process.cwd(), 'package.json');
    
    if (!fs.existsSync(packagePath)) {
      this.logger.error('package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
      process.exit(1);
    }
    
    try {
      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
      this.logger.info(`–ü—Ä–æ–µ–∫—Ç: ${packageJson.name || 'Unknown'} v${packageJson.version || '0.0.0'}`);
      
      if (!packageJson.scripts || !packageJson.scripts.dev) {
        this.logger.error('–°–∫—Ä–∏–ø—Ç "dev" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ package.json');
        process.exit(1);
      }
      
      return packageJson;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
      process.exit(1);
    }
  }
  
  /**
   * –ó–∞–ø—É—Å–∫ Next.js
   */
  async startNextJs(port) {
    return new Promise((resolve, reject) => {
      this.logger.loading(`–ó–∞–ø—É—Å–∫–∞–µ–º Next.js –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Ä—Ç–∞
      const env = { ...process.env, PORT: port.toString() };
      
      this.nextProcess = spawn('npm', ['run', 'dev'], {
        stdio: 'pipe',
        env,
        shell: true,
      });
      
      let started = false;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
      this.nextProcess.stdout.on('data', (data) => {
        const output = data.toString();
        
        // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ Next.js –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        if (output.includes('Ready in') || output.includes('started server on')) {
          if (!started) {
            started = true;
            this.logger.success(`${icons.rocket} Next.js —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
            resolve();
          }
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ Next.js
        this.formatNextJsOutput(output);
      });
      
      this.nextProcess.stderr.on('data', (data) => {
        const output = data.toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞
        if (output.includes('EADDRINUSE') || output.includes('port already in use')) {
          this.logger.error(`–ü–æ—Ä—Ç ${port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
          reject(new Error(`Port ${port} is already in use`));
          return;
        }
        
        this.formatNextJsOutput(output, true);
      });
      
      this.nextProcess.on('error', (error) => {
        this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Next.js:', error.message);
        reject(error);
      });
      
      this.nextProcess.on('exit', (code) => {
        if (!this.isShuttingDown) {
          if (code === 0) {
            this.logger.info('Next.js –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
          } else {
            this.logger.error(`Next.js –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
          }
        }
      });
      
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (30 —Å–µ–∫—É–Ω–¥)
      setTimeout(() => {
        if (!started) {
          this.logger.error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ Next.js (30 —Å–µ–∫—É–Ω–¥)');
          reject(new Error('Next.js startup timeout'));
        }
      }, 30000);
    });
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ Next.js
   */
  formatNextJsOutput(output, isError = false) {
    const lines = output.split('\n').filter(line => line.trim());
    
    for (const line of lines) {
      if (!line.trim()) continue;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (line.includes('webpack compiled') && !line.includes('error')) {
        continue;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      if (line.includes('error') || line.includes('Error') || isError) {
        this.logger.error(`Next.js: ${line.trim()}`);
      } else if (line.includes('warn') || line.includes('Warning')) {
        this.logger.warn(`Next.js: ${line.trim()}`);
      } else if (line.includes('ready') || line.includes('compiled successfully')) {
        this.logger.success(`Next.js: ${line.trim()}`);
      } else if (line.includes('compiling') || line.includes('building')) {
        this.logger.loading(`Next.js: ${line.trim()}`);
      } else {
        this.logger.info(`Next.js: ${line.trim()}`);
      }
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   */
  setupGracefulShutdown() {
    const shutdown = () => {
      if (this.isShuttingDown) return;
      
      this.isShuttingDown = true;
      this.logger.info(`${icons.clean} Graceful shutdown...`);
      
      if (this.healthMonitor) {
        this.healthMonitor.stop();
      }
      
      if (this.nextProcess) {
        this.logger.info('–ó–∞–≤–µ—Ä—à–∞–µ–º Next.js –ø—Ä–æ—Ü–µ—Å—Å...');
        this.nextProcess.kill('SIGTERM');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          if (this.nextProcess && !this.nextProcess.killed) {
            this.logger.warn('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
            this.nextProcess.kill('SIGKILL');
          }
        }, 5000);
      }
      
      setTimeout(() => {
        this.logger.success('–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
        process.exit(0);
      }, 1000);
    };
    
    process.on('SIGINT', shutdown);
    process.on('SIGTERM', shutdown);
    process.on('SIGHUP', shutdown);
  }
  
  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
   */
  async run() {
    try {
      // –ü–µ—á–∞—Ç–∞–µ–º –±–∞–Ω–Ω–µ—Ä
      this.logger.printBanner();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
      this.setupGracefulShutdown();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
      this.logger.printSeparator('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞');
      const packageJson = this.checkPackageJson();
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–º–∏
      this.logger.printSeparator('üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–º–∏');
      const port = await this.portManager.findAvailablePort();
      
      if (!port) {
        this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç');
        process.exit(1);
      }
      
      // –ó–∞–ø—É—Å–∫ Next.js
      this.logger.printSeparator('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
      await this.startNextJs(port);
      
      // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
      this.logger.printSeparator('üíñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è');
      this.healthMonitor = new HealthMonitor(this.logger, port);
      this.healthMonitor.start();
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      this.logger.printSeparator('üéâ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
      this.logger.success(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${port}`);
      this.logger.info(`–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C`);
      this.logger.info(`Session ID: ${this.logger.sessionId}`);
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const runner = new DevRunner();
  runner.run().catch((error) => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { DevRunner, PortManager, HealthMonitor, DevLogger };